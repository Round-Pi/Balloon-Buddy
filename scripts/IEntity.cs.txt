
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using MonoGame.Extended;
using MonoGame.Extended.Collisions;

namespace MyGame {
    public class CubeEntity : IEntity {
        private readonly Game1 _game;
        public Vector2 Velocity;
        public IShapeF Bounds { get; }

        public CubeEntity(Game1 game, RectangleF rectangleF) {
            _game = game;
            Bounds = rectangleF;
        }

        public virtual void Draw(SpriteBatch spriteBatch) {
            spriteBatch.DrawRectangle((RectangleF)Bounds, Color.Red, 3);
        }

        public virtual void Update(GameTime gameTime) {
            Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 50;
        }

        public void OnCollision(CollisionEventArgs collisionInfo) {
            Velocity.X *= -1;
            Velocity.Y *= -1;
            Bounds.Position -= collisionInfo.PenetrationVector;
        }
    }

    public class BallEntity : IEntity {
        private readonly Game1 _game;
        public Vector2 Velocity;
        public IShapeF Bounds { get; }

        public BallEntity(Game1 game, CircleF circleF) {
            _game = game;
            Bounds = circleF;
        }

        public void Draw(SpriteBatch spriteBatch) {
            spriteBatch.DrawCircle((CircleF)Bounds, 8, Color.Red, 3f);
        }

        public void Update(GameTime gameTime) {
            Bounds.Position += Velocity * gameTime.GetElapsedSeconds() * 30;
        }

        public void OnCollision(CollisionEventArgs collisionInfo) {
            Bounds.Position -= collisionInfo.PenetrationVector;
        }
    }
}
public interface IEntity : ICollisionActor {
    public void Update(GameTime gameTime);
    public void Draw(SpriteBatch spriteBatch);
}
